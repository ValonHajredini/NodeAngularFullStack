name: E2E Tests - Create Tool CLI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  e2e-cli-tests:
    name: E2E Create Tool CLI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Setup test environment
        run: |
          cp packages/create-tool/.env.e2e.example packages/create-tool/.env.e2e || true
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> packages/create-tool/.env.e2e
          echo "API_BASE_URL=http://localhost:3000" >> packages/create-tool/.env.e2e
          echo "CREATE_TOOL_ADMIN_EMAIL=e2e-admin@example.com" >> packages/create-tool/.env.e2e
          echo "CREATE_TOOL_ADMIN_PASSWORD=E2eAdmin123!@#" >> packages/create-tool/.env.e2e
          echo "CREATE_TOOL_WORKSPACE=/tmp/create-tool-e2e" >> packages/create-tool/.env.e2e
          echo "CLI_TIMEOUT=60000" >> packages/create-tool/.env.e2e
          echo "API_TIMEOUT=30000" >> packages/create-tool/.env.e2e
          echo "NODE_ENV=test" >> packages/create-tool/.env.e2e

      - name: Run database migrations
        run: npm --workspace=apps/api run db:migrate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test

      - name: Seed database with test data
        run: npm --workspace=apps/api run db:seed
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test

      - name: Start backend API server
        run: |
          cd apps/api
          npm run dev &
          echo $! > api.pid
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-e2e-tests
          PORT: 3000

      - name: Wait for API server to be ready
        run: |
          echo "Waiting for API server..."
          npx wait-on http://localhost:3000/health --timeout 60000
          echo " API server ready"

      - name: Run E2E tests - Full Workflow
        run: npm --workspace=packages/create-tool run test:e2e -- full-workflow.e2e.test.ts
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_BASE_URL: http://localhost:3000
        continue-on-error: false

      - name: Run E2E tests - API Registration
        run: npm --workspace=packages/create-tool run test:e2e -- registration.e2e.test.ts
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_BASE_URL: http://localhost:3000
        continue-on-error: false

      - name: Run E2E tests - Conflict Handling
        run: npm --workspace=packages/create-tool run test:e2e -- conflict-handling.e2e.test.ts
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_BASE_URL: http://localhost:3000
        continue-on-error: false

      - name: Run E2E tests - Smoke Tests
        run: npm --workspace=packages/create-tool run test:e2e -- smoke-tests.e2e.test.ts
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_BASE_URL: http://localhost:3000
        continue-on-error: false

      - name: Run E2E tests - Error Scenarios
        run: npm --workspace=packages/create-tool run test:e2e -- error-scenarios.e2e.test.ts
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_BASE_URL: http://localhost:3000
        continue-on-error: false

      - name: Stop API server
        if: always()
        run: |
          if [ -f apps/api/api.pid ]; then
            kill $(cat apps/api/api.pid) || true
            rm apps/api/api.pid
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: create-tool-e2e-test-results
          path: packages/create-tool/coverage/
          retention-days: 7

      - name: Upload test artifacts on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: create-tool-e2e-artifacts
          path: |
            /tmp/create-tool-e2e/**/*
            packages/create-tool/coverage/
          retention-days: 7

      - name: Clean up test workspace
        if: always()
        run: |
          rm -rf /tmp/create-tool-e2e || true
          echo " Test workspace cleaned"

  e2e-test-results-summary:
    name: E2E Test Results Summary
    runs-on: ubuntu-latest
    needs: [e2e-cli-tests]
    if: always()

    steps:
      - name: Generate test summary
        run: |
          echo "# Create Tool CLI E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: E2E Create Tool CLI Tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "-  Full Workflow Tests (6+ tests)" >> $GITHUB_STEP_SUMMARY
          echo "-  API Registration Tests (5+ tests)" >> $GITHUB_STEP_SUMMARY
          echo "-  Conflict Handling Tests (6+ tests)" >> $GITHUB_STEP_SUMMARY
          echo "-  Smoke Tests (6+ tests)" >> $GITHUB_STEP_SUMMARY
          echo "-  Error Scenario Tests (11+ tests)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: 34+ test cases" >> $GITHUB_STEP_SUMMARY
          echo "- **ACs Covered**: AC1-AC8 (100%)" >> $GITHUB_STEP_SUMMARY
          echo "- **Utility Coverage**: TestWorkspace (70+ unit tests)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- =Ê Test Results: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- =Á Generated Files: Available if tests failed" >> $GITHUB_STEP_SUMMARY
          echo "- =Ý Test Logs: Available if tests failed" >> $GITHUB_STEP_SUMMARY

      - name: Check E2E test results
        run: |
          if [ "${{ needs.e2e-cli-tests.result }}" != "success" ]; then
            echo "L E2E CLI tests failed"
            exit 1
          fi
          echo " All E2E CLI tests passed!"
