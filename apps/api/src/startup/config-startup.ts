/**\n * Configuration startup and initialization module.\n * Handles application configuration validation and setup during startup.\n */\nimport {\n  validateConfigurationConsistency,\n  detectConfigurationChanges,\n  createConfigurationBackup,\n  logConfigAudit,\n  generateConfigHash,\n} from '../utils/config.utils';\nimport { validateProductionSecurity } from '../config/security.config';\nimport { validateSingleTenantConfig } from '../config/single-tenant.config';\nimport { appConfig, tenantConfig } from '../config';\n\n/**\n * Configuration startup result interface.\n */\nexport interface ConfigStartupResult {\n  success: boolean;\n  configHash: string;\n  warnings: string[];\n  errors: string[];\n  backup?: any;\n  changeDetected: boolean;\n}\n\n/**\n * Initializes and validates configuration on application startup.\n * Performs comprehensive configuration checks and setup.\n * @throws {Error} When critical configuration errors are found\n * @returns {ConfigStartupResult} Startup validation result\n */\nexport const initializeConfiguration = (): ConfigStartupResult => {\n  console.log('🚀 Initializing application configuration...');\n\n  const result: ConfigStartupResult = {\n    success: false,\n    configHash: '',\n    warnings: [],\n    errors: [],\n    changeDetected: false,\n  };\n\n  try {\n    // Step 1: Generate and store current configuration hash\n    const configHash = generateConfigHash();\n    result.configHash = configHash;\n    \n    // Store the hash for future change detection\n    process.env.CONFIG_HASH = configHash;\n\n    // Step 2: Detect configuration changes from previous run\n    const changeResult = detectConfigurationChanges();\n    result.changeDetected = changeResult.hasChanged;\n\n    if (changeResult.hasChanged) {\n      result.warnings.push('Configuration changes detected since last startup');\n    }\n\n    // Step 3: Validate configuration consistency\n    validateConfigurationConsistency();\n\n    // Step 4: Validate tenant configuration (single or multi-tenant)\n    if (tenantConfig.multiTenancyEnabled) {\n      console.log('🏢 Multi-tenant mode detected - validating tenant configuration...');\n    } else {\n      console.log('🏠 Single-tenant mode detected - validating single-tenant configuration...');\n      validateSingleTenantConfig();\n    }\n\n    // Step 5: Validate production security if in production\n    if (appConfig.app.nodeEnv === 'production') {\n      validateProductionSecurity();\n    }\n\n    // Step 6: Create configuration backup\n    const backup = createConfigurationBackup();\n    result.backup = backup;\n\n    // Step 7: Log successful startup\n    logConfigAudit('startup', `Application configuration initialized successfully in ${appConfig.app.nodeEnv} mode`);\n\n    result.success = true;\n    console.log('✅ Configuration initialization completed successfully');\n\n    return result;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown configuration error';\n    result.errors.push(errorMessage);\n    \n    logConfigAudit('startup', `Configuration initialization failed: ${errorMessage}`, {\n      errors: [errorMessage],\n    });\n\n    console.error('❌ Configuration initialization failed:', errorMessage);\n    throw error;\n  }\n};\n\n/**\n * Validates configuration reload safety.\n * Checks if configuration can be safely reloaded without restart.\n * @returns {object} Reload safety assessment\n */\nexport const validateConfigurationReload = () => {\n  const criticalKeys = [\n    'NODE_ENV',\n    'PORT',\n    'DB_HOST',\n    'DB_PORT',\n    'DB_NAME',\n    'ENABLE_MULTI_TENANCY',\n    'TENANT_ISOLATION_LEVEL',\n    'TENANT_RLS_ENABLED',\n  ];\n\n  const currentHash = generateConfigHash(criticalKeys);\n  const storedHash = process.env.CONFIG_HASH;\n\n  const result = {\n    canReload: false,\n    requiresRestart: false,\n    changedKeys: [] as string[],\n    reason: '',\n  };\n\n  if (!storedHash) {\n    result.reason = 'No stored configuration hash found';\n    result.requiresRestart = true;\n    return result;\n  }\n\n  if (currentHash !== storedHash) {\n    result.changedKeys = criticalKeys.filter(key => {\n      // Simple check - in practice you'd store individual key hashes\n      return process.env[key] !== undefined;\n    });\n    result.requiresRestart = true;\n    result.reason = 'Critical configuration keys have changed';\n  } else {\n    result.canReload = true;\n    result.reason = 'No critical configuration changes detected';\n  }\n\n  return result;\n};\n\n/**\n * Logs configuration summary on startup.\n * Provides detailed overview of current configuration state.\n */\nexport const logConfigurationSummary = (): void => {\n  console.log('\\n📋 Configuration Summary:');\n  console.log('═══════════════════════════════════════════');\n  \n  // Environment info\n  console.log(`🌍 Environment: ${appConfig.app.nodeEnv}`);\n  console.log(`🚪 Port: ${appConfig.app.port}`);\n  console.log(`🌐 Frontend URL: ${appConfig.app.frontendUrl}`);\n  \n  // Database info\n  console.log(`🗄️  Database: ${appConfig.database.host}:${appConfig.database.port}/${appConfig.database.name}`);\n  console.log(`🔒 Database SSL: ${appConfig.database.ssl ? 'Enabled' : 'Disabled'}`);\n  \n  // Multi-tenancy info\n  if (tenantConfig.multiTenancyEnabled) {\n    console.log('🏢 Multi-tenancy: Enabled');\n    console.log(`   📊 Isolation Level: ${tenantConfig.isolationLevel}`);\n    console.log(`   🛡️  RLS Enabled: ${tenantConfig.rlsEnabled}`);\n    console.log(`   🔐 Token Isolation: ${tenantConfig.tokenIsolation}`);\n    console.log(`   📝 Audit Logging: ${tenantConfig.auditLogging}`);\n    console.log(`   💎 Default Plan: ${tenantConfig.defaultPlan}`);\n  } else {\n    console.log('🏠 Multi-tenancy: Disabled (Single-tenant mode)');\n    console.log(`   🏷️  Default Tenant: ${tenantConfig.defaultTenantId}`);\n  }\n  \n  // Security info\n  console.log(`🔑 JWT Expires: ${appConfig.jwt.expiresIn}s`);\n  console.log(`⚡ Rate Limit: ${appConfig.rateLimit.maxRequests} req/${appConfig.rateLimit.windowMs}ms`);\n  console.log(`🌍 CORS Origins: ${appConfig.cors.origins.length} configured`);\n  \n  // Monitoring info\n  const monitoringEnabled = !!(appConfig.monitoring.sentryDsn || appConfig.monitoring.logtailToken);\n  console.log(`📊 Monitoring: ${monitoringEnabled ? 'Enabled' : 'Disabled'}`);\n  \n  console.log('═══════════════════════════════════════════\\n');\n};\n\n/**\n * Handles configuration warnings during startup.\n * Processes and displays configuration warnings appropriately.\n * @param warnings - Array of warning messages\n */\nexport const handleConfigurationWarnings = (warnings: string[]): void => {\n  if (warnings.length === 0) {\n    return;\n  }\n\n  console.warn('\\n⚠️  Configuration Warnings:');\n  console.warn('═══════════════════════════════════════════');\n  \n  warnings.forEach((warning, index) => {\n    console.warn(`${index + 1}. ${warning}`);\n  });\n  \n  console.warn('═══════════════════════════════════════════');\n  console.warn('💡 These warnings do not prevent startup but should be addressed.');\n  console.warn('');\n};\n\n/**\n * Validates configuration for specific deployment mode.\n * @param mode - Deployment mode ('development', 'staging', 'production')\n * @returns {object} Mode-specific validation result\n */\nexport const validateDeploymentMode = (mode: string = appConfig.app.nodeEnv) => {\n  const validations = {\n    development: {\n      required: ['DB_HOST', 'JWT_SECRET'],\n      recommended: ['REDIS_HOST'],\n      warnings: [] as string[],\n    },\n    staging: {\n      required: ['DB_HOST', 'JWT_SECRET', 'FRONTEND_URL'],\n      recommended: ['SENTRY_DSN', 'DB_SSL'],\n      warnings: [] as string[],\n    },\n    production: {\n      required: ['DB_HOST', 'JWT_SECRET', 'FRONTEND_URL', 'SENDGRID_API_KEY'],\n      recommended: ['SENTRY_DSN', 'DB_SSL', 'LOGTAIL_TOKEN'],\n      warnings: [] as string[],\n    },\n  };\n\n  const config = validations[mode as keyof typeof validations] || validations.development;\n  \n  // Check required variables\n  const missing = config.required.filter(key => !process.env[key]);\n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables for ${mode}: ${missing.join(', ')}`);\n  }\n  \n  // Check recommended variables\n  const missingRecommended = config.recommended.filter(key => !process.env[key]);\n  if (missingRecommended.length > 0) {\n    config.warnings.push(`Missing recommended environment variables for ${mode}: ${missingRecommended.join(', ')}`);\n  }\n  \n  return {\n    mode,\n    valid: true,\n    warnings: config.warnings,\n  };\n};"