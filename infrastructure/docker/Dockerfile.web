# Multi-stage Production Dockerfile for Angular Web App
# Optimized for production deployment with enhanced security

# Stage 1: Build
FROM node:20-alpine AS build

# Install security updates and build dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY apps/web/package*.json ./apps/web/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/config/package*.json ./packages/config/

# Install dependencies with production optimizations
RUN npm ci --workspace=apps/web --include-workspace-root --omit=dev && \
    npm cache clean --force

# Copy source code
COPY tsconfig.json ./
COPY apps/web ./apps/web
COPY packages ./packages

# Build Angular application with production optimizations
RUN npm run build --workspace=apps/web -- --configuration=production && \
    # Remove source maps for security (optional - comment out if needed for debugging)
    find /app/apps/web/dist -name "*.map" -delete

# Stage 2: Production
FROM nginx:1.26-alpine AS production

# Install security updates and minimal required packages
RUN apk update && apk upgrade && \
    apk add --no-cache curl dumb-init && \
    rm -rf /var/cache/apk/*

# Remove unnecessary nginx modules and default content
RUN rm -rf /usr/share/nginx/html/* && \
    rm -rf /etc/nginx/conf.d/default.conf

# Create secure non-root user with minimal privileges
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001 -G nginx-user && \
    # Create required directories
    mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    # Set secure permissions
    chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    chown -R nginx-user:nginx-user /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown nginx-user:nginx-user /var/run/nginx.pid

# Copy built Angular application from build stage with secure permissions
COPY --from=build --chown=nginx-user:nginx-user /app/apps/web/dist/web/browser /usr/share/nginx/html

# Copy production nginx configuration
COPY --chown=nginx-user:nginx-user infrastructure/docker/nginx.conf /etc/nginx/nginx.conf

# Set security labels
LABEL security.no-new-privileges="true"
LABEL security.user="nginx-user"
LABEL version="1.0.0"
LABEL description="Production Angular Web Application"

# Switch to non-root user for security
USER nginx-user

# Expose port 8080 (unprivileged port)
EXPOSE 8080

# Enhanced health check with proper error handling
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl --fail --silent --show-error http://localhost:8080/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start nginx with proper signal handling
CMD ["nginx", "-g", "daemon off;"]