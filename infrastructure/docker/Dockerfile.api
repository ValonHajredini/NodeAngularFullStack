# Multi-stage Production Dockerfile for Express.js API
# Optimized for production deployment with enhanced security

# Stage 1: Dependencies
FROM node:20-alpine AS dependencies

# Install security updates and build tools for native dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache python3 make g++ dumb-init && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files from both root and api app
COPY package*.json ./
COPY apps/api/package*.json ./apps/api/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/config/package*.json ./packages/config/

# Install dependencies using npm ci for faster, reliable builds
RUN npm ci --workspace=apps/api --include-workspace-root --omit=dev && \
    npm cache clean --force

# Stage 2: Build
FROM node:20-alpine AS build

# Install minimal build dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/apps/api/node_modules ./apps/api/node_modules

# Copy source code
COPY package*.json ./
COPY tsconfig.json ./
COPY apps/api ./apps/api
COPY packages ./packages

# Build TypeScript application with production optimizations
RUN npm run build --workspace=apps/api && \
    # Remove source maps for security (optional - comment out if needed for debugging)
    find /app/apps/api/dist -name "*.map" -delete

# Stage 3: Production Runtime
FROM node:20-alpine AS production

# Install security updates and minimal runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create secure non-root user with minimal privileges
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs && \
    # Create app directory with proper permissions
    mkdir -p /app && \
    chown nodejs:nodejs /app

WORKDIR /app

# Copy production dependencies and built application with secure permissions
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=dependencies --chown=nodejs:nodejs /app/apps/api/node_modules ./apps/api/node_modules
COPY --from=build --chown=nodejs:nodejs /app/apps/api/dist ./apps/api/dist
COPY --from=build --chown=nodejs:nodejs /app/packages ./packages
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs apps/api/package*.json ./apps/api/

# Set security labels
LABEL security.no-new-privileges="true"
LABEL security.user="nodejs"
LABEL version="1.0.0"
LABEL description="Production Express.js API Application"

# Switch to non-root user for security
USER nodejs

# Expose port 3000
EXPOSE 3000

# Enhanced health check with multiple endpoints and proper error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl --fail --silent --show-error http://localhost:3000/api/v1/health/liveness || exit 1

# Set production environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with proper signal handling
CMD ["node", "apps/api/dist/server.js"]