# Digital Ocean App Platform Configuration
# Production deployment configuration for NodeAngularFullStack application

name: nodeangularfullstack-prod
region: nyc

# Environment variables for all services
envs:
  - key: NODE_ENV
    value: production
  - key: TZ
    value: UTC
  - key: APP_NAME
    value: NodeAngularFullStack
  - key: LOG_LEVEL
    value: info

# Database configuration
databases:
  - name: postgres-db
    engine: PG
    production: true
    version: "15"
    size: basic
    num_nodes: 1
    db_name: nodeangularfullstack_prod
    db_user: app_user

# Services configuration
services:
  # Backend API Service
  - name: api
    source_dir: /
    github:
      repo: your-username/NodeAngularFullStack
      branch: main
      deploy_on_push: true
    dockerfile_path: infrastructure/docker/Dockerfile.api

    # Resource allocation
    instance_count: 1
    instance_size_slug: basic-xxs

    # Health check configuration
    health_check:
      http_path: /api/v1/health/liveness
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      success_threshold: 1
      failure_threshold: 3

    # HTTP configuration
    http_port: 3000

    # Environment variables specific to API
    envs:
      - key: PORT
        value: "3000"
      - key: DATABASE_URL
        type: SECRET
        value: ${postgres-db.DATABASE_URL}
      - key: REDIS_URL
        type: SECRET
        value: ${redis.DATABASE_URL}
      - key: JWT_SECRET
        type: SECRET
        value: ${JWT_SECRET}
      - key: JWT_REFRESH_SECRET
        type: SECRET
        value: ${JWT_REFRESH_SECRET}
      - key: SENDGRID_API_KEY
        type: SECRET
        value: ${SENDGRID_API_KEY}
      - key: DO_SPACES_KEY
        type: SECRET
        value: ${DO_SPACES_KEY}
      - key: DO_SPACES_SECRET
        type: SECRET
        value: ${DO_SPACES_SECRET}
      - key: DO_SPACES_ENDPOINT
        value: nyc3.digitaloceanspaces.com
      - key: DO_SPACES_BUCKET
        value: nodeangularfullstack-storage
      - key: CORS_ORIGIN
        value: https://nodeangularfullstack-web.ondigitalocean.app
      - key: SENTRY_DSN
        type: SECRET
        value: ${SENTRY_DSN_API}
      - key: LOGTAIL_TOKEN
        type: SECRET
        value: ${LOGTAIL_TOKEN}

  # Redis Cache Service
  - name: redis
    engine: REDIS
    production: true
    version: "7"
    size: basic
    num_nodes: 1

# Static sites configuration
static_sites:
  # Frontend Angular Application
  - name: web
    source_dir: /
    github:
      repo: your-username/NodeAngularFullStack
      branch: main
      deploy_on_push: true
    dockerfile_path: infrastructure/docker/Dockerfile.web

    # Build configuration
    build_command: npm run build --workspace=apps/web -- --configuration=production
    output_dir: apps/web/dist/web/browser

    # Environment variables for build
    envs:
      - key: NODE_ENV
        value: production
      - key: API_URL
        value: https://nodeangularfullstack-api.ondigitalocean.app
      - key: SENTRY_DSN
        type: SECRET
        value: ${SENTRY_DSN_WEB}

    # Custom domain and routing
    routes:
      - path: /api
        preserve_path_prefix: true
        component_name: api

    # Error pages
    error_document: index.html

    # CORS configuration
    cors:
      allow_origins:
        - exact: https://nodeangularfullstack-web.ondigitalocean.app
      allow_methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allow_headers:
        - Content-Type
        - Authorization
        - X-Requested-With

# Workers (background jobs)
workers:
  - name: worker
    source_dir: /
    github:
      repo: your-username/NodeAngularFullStack
      branch: main
    dockerfile_path: infrastructure/docker/Dockerfile.api

    # Resource allocation for background tasks
    instance_count: 1
    instance_size_slug: basic-xxs

    # Run command for worker process
    run_command: node apps/api/dist/worker.js

    # Environment variables (same as API)
    envs:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        type: SECRET
        value: ${postgres-db.DATABASE_URL}
      - key: REDIS_URL
        type: SECRET
        value: ${redis.DATABASE_URL}

# Alerts configuration
alerts:
  - rule: CPU_UTILIZATION
    threshold: 80
    operator: GREATER_THAN
    window: FIVE_MINUTES
  - rule: MEM_UTILIZATION
    threshold: 80
    operator: GREATER_THAN
    window: FIVE_MINUTES
  - rule: RESTART_COUNT
    threshold: 3
    operator: GREATER_THAN
    window: FIVE_MINUTES

# Domain configuration (to be updated with actual domain)
domains:
  - domain: your-domain.com
    type: PRIMARY
    wildcard: false
    certificate_id: ""
  - domain: api.your-domain.com
    type: ALIAS
    wildcard: false
    certificate_id: ""

# Features
features:
  - buildpack-stack=ubuntu-22