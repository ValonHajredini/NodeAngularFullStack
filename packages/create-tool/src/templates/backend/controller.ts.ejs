import { Request, Response, NextFunction } from 'express';
import { <%= className %>Service } from '../services/<%= toolId %>.service';

/**
 * <%= toolName %> Controller
 *
 * Handles HTTP requests for <%= toolName %> operations.
 * Delegates business logic to <%= className %>Service.
 */
export class <%= className %>Controller {
  constructor(private service: <%= className %>Service) {}

  /**
   * GET <%= apiBase %>
   * Get all <%= toolName %> records.
   */
  getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const records = await this.service.getAll();
      res.json({
        message: '<%= toolName %> records retrieved successfully',
        data: records,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * GET <%= apiBase %>/:id
   * Get <%= toolName %> record by ID.
   */
  getById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      const record = await this.service.getById(id);

      if (!record) {
        res.status(404).json({
          error: `<%= toolName %> record with ID '${id}' not found`,
        });
        return;
      }

      res.json({
        message: '<%= toolName %> record retrieved successfully',
        data: record,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * POST <%= apiBase %>
   * Create new <%= toolName %> record.
   */
  create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const record = await this.service.create(req.body);
      res.status(201).json({
        message: '<%= toolName %> record created successfully',
        data: record,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * PUT <%= apiBase %>/:id
   * Update <%= toolName %> record.
   */
  update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      const record = await this.service.update(id, req.body);
      res.json({
        message: '<%= toolName %> record updated successfully',
        data: record,
      });
    } catch (error) {
      next(error);
    }
  };

  /**
   * DELETE <%= apiBase %>/:id
   * Delete <%= toolName %> record.
   */
  delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const { id } = req.params;
      await this.service.delete(id);
      res.json({
        message: '<%= toolName %> record deleted successfully',
      });
    } catch (error) {
      next(error);
    }
  };
}
