import { <%= className %>Repository } from '../repositories/<%= toolId %>.repository';
import {
  <%= className %>Record,
  Create<%= className %>Input,
  Update<%= className %>Input,
} from '@nodeangularfullstack/shared';

/**
 * <%= toolName %> Service
 *
 * Business logic layer for <%= toolName %> operations.
 * Implements validation and domain rules.
 */
export class <%= className %>Service {
  constructor(private repository: <%= className %>Repository) {}

  /**
   * Get all <%= toolName %> records.
   * @returns Promise containing array of records
   */
  async getAll(): Promise<<%= className %>Record[]> {
    return await this.repository.findAll();
  }

  /**
   * Get <%= toolName %> record by ID.
   * @param id - Record ID
   * @returns Promise containing record or null
   * @throws {Error} When record not found
   */
  async getById(id: string): Promise<<%= className %>Record | null> {
    const record = await this.repository.findById(id);
    if (!record) {
      throw new Error(`<%= toolName %> record '${id}' not found`);
    }
    return record;
  }

  /**
   * Create new <%= toolName %> record.
   * @param input - Record data
   * @returns Promise containing created record
   * @throws {Error} When validation fails
   */
  async create(input: Create<%= className %>Input): Promise<<%= className %>Record> {
    // TODO: Add business logic validation
    // Example: Validate required fields, check duplicates, etc.

    return await this.repository.create(input);
  }

  /**
   * Update <%= toolName %> record.
   * @param id - Record ID
   * @param input - Updated data
   * @returns Promise containing updated record
   * @throws {Error} When record not found or validation fails
   */
  async update(id: string, input: Update<%= className %>Input): Promise<<%= className %>Record> {
    // Verify record exists
    await this.getById(id);

    // TODO: Add business logic validation

    return await this.repository.update(id, input);
  }

  /**
   * Delete <%= toolName %> record.
   * @param id - Record ID
   * @returns Promise of void
   * @throws {Error} When record not found
   */
  async delete(id: string): Promise<void> {
    // Verify record exists
    await this.getById(id);

    await this.repository.delete(id);
  }
}
