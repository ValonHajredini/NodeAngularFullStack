import { Router } from 'express';
import { <%= className %>Controller } from '../controllers/<%= toolId %>.controller';
import { authMiddleware } from '../middleware/auth.middleware';
import { validate<%= className %>Create, validate<%= className %>Update } from '../validators/<%= toolId %>.validator';

/**
 * <%= toolName %> Routes
 *
 * Express router for <%= toolName %> API endpoints.
 * All routes protected by authentication middleware.
 */

// Initialize controller (dependency injection happens in main app setup)
const controller = new <%= className %>Controller(/* service will be injected */);

const router = Router();

/**
 * @route   GET <%= apiBase %>
 * @desc    Get all <%= toolName %> records
 * @access  Private (requires authentication)
 */
router.get('/', authMiddleware, controller.getAll);

/**
 * @route   GET <%= apiBase %>/:id
 * @desc    Get <%= toolName %> record by ID
 * @access  Private (requires authentication)
 */
router.get('/:id', authMiddleware, controller.getById);

/**
 * @route   POST <%= apiBase %>
 * @desc    Create new <%= toolName %> record
 * @access  Private (requires authentication)
 */
router.post('/', authMiddleware, validate<%= className %>Create, controller.create);

/**
 * @route   PUT <%= apiBase %>/:id
 * @desc    Update <%= toolName %> record
 * @access  Private (requires authentication)
 */
router.put('/:id', authMiddleware, validate<%= className %>Update, controller.update);

/**
 * @route   DELETE <%= apiBase %>/:id
 * @desc    Delete <%= toolName %> record
 * @access  Private (requires authentication)
 */
router.delete('/:id', authMiddleware, controller.delete);

export default router;
