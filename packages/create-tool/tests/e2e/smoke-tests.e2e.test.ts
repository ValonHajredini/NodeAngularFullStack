/**
 * End-to-End Smoke Tests for Generated Tool Code Quality
 *
 * These tests validate that code generated by the CLI tool:
 * - Compiles successfully with TypeScript
 * - Passes linting checks
 * - Builds without errors
 * - Meets quality standards before being used
 *
 * This ensures generated tools are production-ready and don't introduce
 * compilation or quality issues into the codebase.
 *
 * @group e2e
 * @group smoke-tests
 */

import { TestWorkspace } from './utils/test-workspace';
import { CliRunner } from './utils/cli-runner';
import { exec } from 'child_process';
import { promisify } from 'util';
import * as path from 'path';

const execAsync = promisify(exec);

describe('Generated Tool Smoke Tests (AC5)', () => {
  let workspace: TestWorkspace;
  let cli: CliRunner;

  beforeEach(async () => {
    workspace = new TestWorkspace();
    await workspace.create();
    cli = new CliRunner();
  });

  afterEach(async () => {
    await workspace.cleanup();
  });

  /**
   * AC5.1: Test builds shared package successfully
   *
   * The shared package (@nodeangularfullstack/shared) must build
   * before any generated code can be used, as it contains shared types.
   */
  it('should build shared package successfully', async () => {
    // Arrange
    const answers = {
      toolName: 'Smoke Test Build',
      toolId: 'e2e-smoke-build',
      description: 'Testing shared package build',
      icon: 'pi-check',
      features: [],
      permissions: [],
    };

    // Act - Generate tool first
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);

    // Act - Build shared package
    const buildCommand = 'npm run build:shared';
    const { stdout, stderr } = await execAsync(buildCommand, {
      cwd: path.resolve(__dirname, '../../../..'), // Project root
      timeout: 120000, // 2 minutes
    });

    // Assert
    expect(stderr).not.toContain('error');
    expect(stderr).not.toContain('ERROR');
    expect(stdout).toContain('build'); // Build command executed
  }, 180000); // 3 minute timeout

  /**
   * AC5.2: Test runs backend typecheck on generated tool files
   *
   * Verifies that all generated backend files (controller, service,
   * repository, validator, routes) compile without TypeScript errors.
   */
  it('should typecheck backend files without errors', async () => {
    // Arrange
    const answers = {
      toolName: 'Smoke Test Backend',
      toolId: 'e2e-smoke-backend',
      description: 'Testing backend typecheck',
      icon: 'pi-server',
      features: ['list', 'create', 'update', 'delete'],
      permissions: ['read', 'write', 'delete'],
    };

    // Act - Generate tool
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);

    // Act - Run backend typecheck
    const typecheckCommand = 'npm --workspace=apps/api run typecheck';
    const { stdout, stderr } = await execAsync(typecheckCommand, {
      cwd: path.resolve(__dirname, '../../../..'),
      timeout: 120000,
    });

    // Assert - No TypeScript errors
    expect(stderr).not.toContain('error TS');
    expect(stdout).not.toContain('error TS');
    // TypeScript exits with code 0 on success (checked by execAsync)
  }, 180000);

  /**
   * AC5.3: Test runs frontend typecheck on generated tool files
   *
   * Verifies that all generated frontend files (component, service,
   * routes) compile without TypeScript errors and follow Angular 20+ patterns.
   */
  it('should typecheck frontend files without errors', async () => {
    // Arrange
    const answers = {
      toolName: 'Smoke Test Frontend',
      toolId: 'e2e-smoke-frontend',
      description: 'Testing frontend typecheck',
      icon: 'pi-desktop',
      features: ['list', 'detail'],
      permissions: ['read'],
    };

    // Act - Generate tool
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);

    // Act - Run frontend typecheck
    const typecheckCommand = 'npm --workspace=apps/web run typecheck';
    const { stdout, stderr } = await execAsync(typecheckCommand, {
      cwd: path.resolve(__dirname, '../../../..'),
      timeout: 120000,
    });

    // Assert - No TypeScript errors
    expect(stderr).not.toContain('error TS');
    expect(stdout).not.toContain('error TS');
  }, 180000);

  /**
   * AC5.4: Test runs backend lint on generated tool files
   *
   * Verifies that generated backend code follows ESLint standards
   * and coding conventions defined in the project.
   */
  it('should lint backend files without errors', async () => {
    // Arrange
    const answers = {
      toolName: 'Smoke Test Lint Backend',
      toolId: 'e2e-smoke-lint-backend',
      description: 'Testing backend linting',
      icon: 'pi-check-circle',
      features: ['list'],
      permissions: ['read'],
    };

    // Act - Generate tool
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);

    // Act - Run backend lint on generated files
    const backendFiles = [
      `apps/api/src/controllers/${answers.toolId}.controller.ts`,
      `apps/api/src/services/${answers.toolId}.service.ts`,
      `apps/api/src/repositories/${answers.toolId}.repository.ts`,
      `apps/api/src/validators/${answers.toolId}.validator.ts`,
      `apps/api/src/routes/${answers.toolId}.routes.ts`,
    ].join(' ');

    const lintCommand = `npm --workspace=apps/api run lint -- ${backendFiles}`;
    const { stdout, stderr } = await execAsync(lintCommand, {
      cwd: path.resolve(__dirname, '../../../..'),
      timeout: 90000,
    });

    // Assert - No linting errors
    expect(stderr).not.toContain('error');
    expect(stdout).not.toContain('✖'); // ESLint error symbol
  }, 150000);

  /**
   * AC5.5: Test runs frontend lint on generated tool files
   *
   * Verifies that generated frontend code follows ESLint standards
   * and Angular style guide conventions.
   */
  it('should lint frontend files without errors', async () => {
    // Arrange
    const answers = {
      toolName: 'Smoke Test Lint Frontend',
      toolId: 'e2e-smoke-lint-frontend',
      description: 'Testing frontend linting',
      icon: 'pi-code',
      features: ['list', 'create'],
      permissions: ['read', 'write'],
    };

    // Act - Generate tool
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);

    // Act - Run frontend lint on generated files
    const frontendFiles = [
      `apps/web/src/app/features/${answers.toolId}/${answers.toolId}.component.ts`,
      `apps/web/src/app/features/${answers.toolId}/${answers.toolId}.service.ts`,
      `apps/web/src/app/features/${answers.toolId}/${answers.toolId}.routes.ts`,
    ].join(' ');

    const lintCommand = `npm --workspace=apps/web run lint -- ${frontendFiles}`;
    const { stdout, stderr } = await execAsync(lintCommand, {
      cwd: path.resolve(__dirname, '../../../..'),
      timeout: 90000,
    });

    // Assert - No linting errors
    expect(stderr).not.toContain('error');
    expect(stdout).not.toContain('✖');
  }, 150000);

  /**
   * AC5.6: Comprehensive smoke test with full workflow
   *
   * Tests the complete workflow: generate → build shared → typecheck → lint
   * This represents the real-world scenario where all steps must succeed.
   */
  it('should pass all quality checks in complete workflow', async () => {
    // Arrange
    const answers = {
      toolName: 'Comprehensive Smoke Test',
      toolId: 'e2e-smoke-comprehensive',
      description: 'Full quality validation',
      icon: 'pi-verified',
      features: ['list', 'create', 'update', 'delete', 'detail'],
      permissions: ['read', 'write', 'delete'],
    };

    // Act - Generate tool
    const generateResult = await cli.run({
      answers,
      cwd: workspace.getPath(),
      timeout: 60000,
    });
    cli.expectSuccess(generateResult);
    expect(generateResult.duration).toBeLessThan(60000); // <60s per story requirement

    // Act - Run all quality checks in sequence
    const projectRoot = path.resolve(__dirname, '../../../..');

    // Step 1: Build shared package
    const buildResult = await execAsync('npm run build:shared', {
      cwd: projectRoot,
      timeout: 120000,
    });
    expect(buildResult.stderr).not.toContain('error');

    // Step 2: Backend typecheck
    const backendTypecheckResult = await execAsync('npm --workspace=apps/api run typecheck', {
      cwd: projectRoot,
      timeout: 120000,
    });
    expect(backendTypecheckResult.stdout).not.toContain('error TS');

    // Step 3: Frontend typecheck
    const frontendTypecheckResult = await execAsync('npm --workspace=apps/web run typecheck', {
      cwd: projectRoot,
      timeout: 120000,
    });
    expect(frontendTypecheckResult.stdout).not.toContain('error TS');

    // Step 4: Backend lint
    const backendLintResult = await execAsync(
      `npm --workspace=apps/api run lint -- apps/api/src/**/${answers.toolId}.*`,
      {
        cwd: projectRoot,
        timeout: 90000,
      }
    );
    expect(backendLintResult.stdout).not.toContain('✖');

    // Step 5: Frontend lint
    const frontendLintResult = await execAsync(
      `npm --workspace=apps/web run lint -- apps/web/src/app/features/${answers.toolId}/`,
      {
        cwd: projectRoot,
        timeout: 90000,
      }
    );
    expect(frontendLintResult.stdout).not.toContain('✖');

    // Assert - All checks passed (no exceptions thrown)
    expect(true).toBe(true); // All steps completed successfully
  }, 600000); // 10 minute timeout for comprehensive test
});
